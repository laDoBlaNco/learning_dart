/*
Module 2: Command Line and Utilities

Introduction:

Situation - Need to automate tasks, run tests, and manage dependencies
Solution - leveraging command line and various utilities in dart
  â–ª Essential for effective dart development
  â–ª helps streamline workflow for:
    â–ª scripting
    â–ª testing
    â–ª dependency management

Dart command line tools:
  â–ª Dart SDK
  â–ª Dart command
  â–ª Pub tool
  â–ª Dart devtool

Dart SDK
  â–ª Development toolchain
    â–ª fast incremental compilation
    â–ª stateful hot reload
  â–ª Production toolchain
    â–ª fastest native output
    â–ª smallest runtime
  â–ª Collection of tools and libraries
  â–ª Includes
    â–ª Dart VM
    â–ª Dart core libraries
    â–ª Dart command line tools

Dart Command
  â–ª running dart programs
  â–ª managing packages
  â–ª performing development tasks
  â–ª Common dart commands:
    â–ª dart run - run dart scripts/programs
    â–ª dart analyze - check my code for errors, warnings, and potential issues
    â–ª dart test - ensure code works as expected
    â–ª dart format  - automatically formats the code based on the standard dart style guide
    â–ª dart create - generate new dart projects with standard structure
    â–ª dart compile - compile dart to various formats
    â–ª dart devtools - open devtools (optionally connecting to an existing app)
    â–ª dart doc - generate API documentation for dart projects
    â–ª dart fix - apply automated fixes to dart source code
    â–ª dart info - show diagnostic information about the installed tooling
    â–ª dart pub - work with packages

Pub Tool - Dart's package manager
  â–ª manage dependencies
  â–ª publish packages
  â–ª Command Commands:
    â–ª dart pub add - add new dependiencies to the project ðŸ¤¯ now you tell me?
    â–ª dart pub get - installs all dependencies listed in the pubspec.yaml file
    â–ª dart pub upgrade - update dependencies to the latest compatible versions
    â–ª dart pub publish - publish your packages to the dart package repository

Dart DevTools - suite of performance and debugging tools
  â–ª relevant for dart and flutter applications
  â–ª provides a web-based interface
  â–ª helps analyze and optimize code
    â–ª performance profiling
      â–ª monitor application performance real-time
      â–ª identify bottlenecks
      â–ª optimize code
      â–ª provides detailed insights into CPU and memory usage
      â–ª help identify areas that need improvement
    â–ª memory analysis
      â–ª inspect memory usage
      â–ª help detect memory leaks
      â–ª optimize memory consumption
      â–ª track allocations
      â–ª analyze memory graphs
      â–ª take snapshots to compare memory states
    â–ª widget inspector
      â–ª offers a visual representation of the widget tree
      â–ª simplifies the process of understanding and debugging UI

Third-party tools
  â–ª Shell-scripting
    â–ª enhance productivity
    â–ª automates repetive tasks by writing shell scripts
  â–ª makefiles
    â–ª automate tasks
    â–ª allows defining rules to build and manage project
  â–ª continuous integration (CI)
    â–ª incorporated in development workflow
    â–ª ensures code is always in a deployable state
*/

/*

Recap:
  â–ª dart provides several essential command line tools
  â–ª dart sdk is a collection of tools and libraries for developing dart apps
  â–ª dart command is a versatile tool for running dart programs, managing
    packages, and performing various development tasks
  â–ª pub tool is dart's package manager, which helps to manage dependencies and
    publish packages
  â–ª dart devtools is a suite of performance and debugging tools for dart and flutter
    applications
  â–ª Other third-party tools that work well with Dart include shell-scripting, makefiles,
    and CI

 */