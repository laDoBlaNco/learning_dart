// ignore_for_file: unused_local_variable

/*
Module 2: Libraries in Dart

The impact of libraries
  â–ª Many around world use Flutter to build cutting-edge products
  â–ª Libraries steamline coding and development


The dart:core library
  â–ª Provides essential building blocks for coding
  â–ª Handles basic data types, collections, and utility functions
  â–ª Imported by default

The dart:math library
  â–ª provides things such as cosine and sine functions
  â–ª pi and e constants
  â–ª random number generation
  â–ª probability-based and statistical calculations

The dart:async library
  â–ª Creates asynchronous code (streams and future classes)
  â–ª Helps perform multiple tasks without blocking other operations

  Futures:
    â–ª Accessible in the future
    â–ª Essential for async operations like
      â–ª fetching online data
      â–ª lengthy computations
    â–ª 'await' pauses computation until the Future returns a value

  Streams:
    â–ª Series of asynchronous events
      â–ª manage data flows from users or servers
    â–ª Subscribe to a Stream and react to individual events

The dart:convert library
  â–ª provides converters for UTF-8 and JSON
  â–ª helps apps communicate with exterior apis
  â–ª essential for connecting with external systems

The http package
  â–ª contains high-level classes and functions
  â–ª simplifies HTTP connections
  â–ª download or transfer data
  â–ª interact with RESTful APIs

The intl package
  â–ª resolves a unique and widespread problem
  â–ª helps apps expand their geographical reach
  â–ª provides localization and internationalization support
  â–ª helps apps adapt to different reqions

The path package
  â–ª critical for the resolution of paths for files and directories
  â–ª helps organize entities efficiently
  â–ª provides splitting, joining, and normalizing, etc
  â–ª manipulates files and directory paths

Creating my own library
  â–ª Encapsulates resuable code
  â–ª Boosts maintainability and modularity



*/

// import statements for any library other than dart:core
import 'dart:math';
import 'dart:async';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:path/path.dart' as p;
// using my own library
import 'math_utils.dart';

void main() async {
  // I had to add 'async' to main in order to use await down below
  // these types are part of dart:core
  String greeting = 'Hello, Dart!';
  int number = 42;
  List<String> fruits = ['Apple', 'Banana', 'Cherry'];
  Map<String, int> scores = {'Alice': 90, 'Bob': 85};

  print(greeting);
  print(number);
  print(fruits);
  print(scores);
  print('');

  // types and functions in dart:math lib
  const double e = 2.718281828459045;
  const double pi = 3.1415926535897932;

  double angle = pi / 4;
  double sine = sin(angle);
  double cosine = cos(angle);
  Random random = Random();
  int randomNumber = random.nextInt(100);

  print('Sine: $sine');
  print('Cosine: $cosine');
  print('Random Number: $randomNumber');
  print('');

  // these lines are for dart:async
  Future<String> fetchData() async {
    await Future.delayed(Duration(seconds: 2)); // simulate data delay
    return 'Data fetched!';
  }

  String data = await fetchData();
  // so with 'await' the assignment isn't made till the data is availabe ðŸ¤¯
  print(data);
  print('');

  // these lines are for dart:convert
  String jsonString = '{"name":"Alice","age":30}'; // json
  Map<String, dynamic> user = jsonDecode(jsonString); // json -> dart map
  Map<String, dynamic> newUser = {'name': 'Bob', 'age': 25}; // dart map
  String newJsonString = jsonEncode(newUser); // dart map -> json

  print(jsonString);
  print(user);
  print(newUser);
  print(newJsonString);
  print('');

  // these lines use http package imported with our pubspec.yaml file
  var url = Uri.parse('https://jsonplaceholder.typicode.com/posts/1');
  var response = await http.get(url); // get request

  if (response.statusCode == 200) {
    print('Response data: ${response.body}'); // NICE to work with ðŸ¤“
  } else {
    print('Request failed with status: ${response.statusCode}');
  }
  print('');

  // these lines use intl package imported with our pubspec.yaml file
  var now = DateTime.now();
  var formatter = DateFormat('yyyy-MM-dd');
  String formattedDate = formatter.format(now);
  print('Formatted date: $formattedDate');
  print('');

  // lines for using the path package
  var fullPath = p.join('directory', 'file.txt');
  print('Full path: $fullPath');
  print('');

  // using my library
  int sum = add(10, 5);
  int difference = subtract(10, 5);
  double product = multiply(10, 5);
  double quotient = divide(10, 5);

  print('Sum: $sum');
  print('Difference: $difference');
  print('Product: $product');
  print('Quotient: $quotient');
}


/*

Recap:
  â–ª The dart:core library handles core programming essentials
  â–ª The dart:async library handls tasks that involve delays
  â–ª The dart:convert library enables JSON handling
  â–ª The http package works with data or RESTful APIs
  â–ª The intl package provides localization and internationalization support
  â–ª The path package manipulates file and directory paths
  â–ª Creating my own library boosts project maintainability and modularity
    â–ª To create a library
      â–ª create a new dart file
      â–ª define the library with the 'library' keyword
      â–ª define all the variables, functions, classes, etc I want to use
    â–ª Use the import keyword to
      â–ª use a library in another file
      â–ª access functions, classes, and variables without duplicating code
*/