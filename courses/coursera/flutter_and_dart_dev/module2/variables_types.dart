// ignore_for_file: unused_local_variable

/*
VARIABLES AND TYPES:

Variables act as placeholders for storing data
Data types specify the kind of data a variable can hold

Variables:
  â–ª Act as containers to hold data that can change over time
    â–ª Step 1 - Declare the variable with a name (var greeting;)
    â–ª Step 2 - Set a value for the variable (greeting = 'hello';)

Variables in Dart: Use of keywords
  â–ª var - declares a variable without specifying its type - inferred
    â–ª I can change a var variable at any time with a value of the same type
  â–ª const - declares compile-time constants
    â–ª The value of a const variable is determine at compile-time and can't be
      changed at run-time
  â–ª final - declares a variable that can only be set once. Once set they can't
    be changed. But unlike const, they can be set at runtime


Data types in Dart
  â–ª Every variable in dart must have a data type
  â–ª Common data types:
    â–ª numbers
    â–ª strings
    â–ª bools
    â–ª lists
    â–ª maps

Numbers
  â–ª Two types of numbers in dart
    â–ª int for integers
    â–ª double for floating-point

Strings
  â–ª Represent a sequence of characters
  â–ª I can use single or double quotes
  â–ª string interpolation is a powerful feature in Dart
    â–ª allows including variables or expressions inside a string
    â–ª allows using the $ symbol to embed variable directly to the string 
      rather than using concatenation (+)

Booleans
  â–ª representing true or false values
  â–ª used in control flow statements such as 'if' and 'while'

Lists
  â–ª Ordered collections of items
  â–ª the first element is at index 0 (zero-based)

Maps
  â–ª Collections of key-value pairs
  â–ª Useful to look up values based on unique keys

Null: Significance
  â–ª Represents an absence of a value
  â–ª Variables are not initialized (technically they are in fact initialized
    to 'null' and nullable vars are automatically initialized to null)

Type inference and annotations: Significance
  â–ª Infers the type of a variable
  â–ª Annotates data types

*/

// example
void main() {
  var name = 'Alice'; // can be changed later
  final age; // can't be changed once set, but can be set during runtime
  const pi = 3.14; // can't be changed after compilation

  name = 'Kevin'; // this is ok since its 'var'
  age = 20; // this is also ok as its 'final', and can be set at runtime
  // pi = 3.142; // this will error as we can't change it at runtime

  // example numbers
  int age2 = 30;
  double height = 5.9;

  // string example
  String greeting = 'Hello, Dart!';
  String name2 = 'Odalis';
  String message = 'Hello, $name2!';
  print(message);
  print('');

  // boolean example
  bool isVisible = true;
  bool isActive = false;

  // List examples
  List<String> fruits = ['Apple', 'Banana', 'Cherry'];
  print(fruits[0]);
  fruits.add('Orange'); // you can add to the list with the 'add' method
  print(fruits);
  print(fruits[0]);
  print('');

  // map example
  Map<String, int> scores = {'Alice': 90, 'Bob': 85, 'Charlie': 95};
  scores['Dave'] = 88; // we can add to the map using the same syntax
  print(scores);
  print(scores['Alice']);

  print('');

  // null example
  String? nullableString = null; // without the '?' we can't set to null
  int? nullableInt = null;

  // type inference and annotations
  var city = 'New York'; // type inferred is String
  String country = 'USA'; // type annotated explicitly
}

/*
Conclusion: Understanding the use of variables and data types is crucial
for any Dart dev to build more complex and powerful applications

Recap:
  â–ª Variables are like containers that hold data. I can declare them using the
    var, final, or const keywords
  â–ª Common data types for variables include numbers, strings, bools, lists, and
    maps.
  â–ª The two types of numbers in dart are int for integers and double for 
    floating-point numbers
  â–ª Strings represent a sequence of characters within single or double quotes
  â–ª Booleans represent true or false values
  â–ª Lists are ordered collections of items
  â–ª Maps are unordered? ðŸ¤” collections of key-value pairs


*/
